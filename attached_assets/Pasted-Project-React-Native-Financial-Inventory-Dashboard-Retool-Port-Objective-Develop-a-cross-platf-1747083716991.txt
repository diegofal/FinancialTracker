Project: React Native Financial & Inventory Dashboard (Retool Port)
Objective:
Develop a cross-platform (iOS & Android) React Native mobile application that mirrors the functionality and user interface of an existing Retool-based financial and inventory dashboard. The application will feature key financial metric displays, detailed views for accounts receivable, invoicing, and stock management, incorporating interactive charts and filterable data tables. Initially, the app will use mock data based on defined structures, with the intent to later integrate with live SPISA and xERP backend APIs.

I. Core Technologies & Libraries:

Language: TypeScript

Framework: React Native

Navigation: React Navigation (v6)

Top Tab Navigator for main sections.

Nested Top Tab Navigator for "Stock" subsections.

State Management: Zustand (preferred). If not feasible for the AI, use React Context API as a fallback.

API Calls: Axios (configure a base instance for future API integration).

Charting: victory-native OR react-native-gifted-charts (select one and use consistently).

Tables: react-native-table-component OR custom FlatList implementations (prioritize FlatList for performance with large datasets and custom styling).

Icons: react-native-vector-icons (specifically FontAwesome 5 and MaterialIcons).

Date/Time Manipulation: date-fns or dayjs.

Local Persistent Storage: @react-native-async-storage/async-storage.

Styling: StyleSheet API. Adopt a consistent styling approach (e.g., theme object for colors, fonts).

II. Global App Structure:

Root Component (App.tsx):

Set up the main navigation container.

Initialize Zustand store (or Context providers).

Main Tab Navigator (MainTabs.tsx):

Position: Top of the screen.

Tabs:

"Cuentas Corriente": Screen AccountsReceivableScreen. Icon: FontAwesome name users.

"Facturas": Screen InvoicesScreen. Icon: FontAwesome5 name file-invoice-dollar.

"Stock": Screen StockScreen. Icon: FontAwesome5 name box-open.

Stock Screen Tab Navigator (StockTabs.tsx - nested within StockScreen):

Position: Top of the "Stock" screen, below its main header (if any).

Tabs:

"Actual": Screen CurrentStockScreen.

"Discontinuado": Screen DiscontinuedStockScreen.

III. Mock API Data & Service Layer:

Create a services/api.ts file. For each data requirement, define a TypeScript interface for the expected API response and a mock async function that returns a promise resolving to mock data of that type. Introduce realistic delays (e.g., 500-1500ms) in mock functions using setTimeout.

// In services/api.ts

// --- Helper for Mock Delay ---
const mockApiDelay = (duration: number = 1000) => new Promise(resolve => setTimeout(resolve, duration));

// --- SPISA Data Types & Mocks ---
export interface BalanceItem {
  Name: string;
  Amount: number; // Saldo
  Due: number;    // Saldo Vencido
  Type: 0 | 1;  // 0 for debt (highlighted rows), 1 for credit/payment
}
export const fetchSpisaBalances = async (): Promise<BalanceItem[]> => {
  await mockApiDelay();
  return [
    { Name: "INDUSTRIAL DAX", Amount: 2321899.15, Due: 2321899.15, Type: 0 },
    { Name: "BRICOD CONTADO", Amount: 2977776.20, Due: 2295247.96, Type: 0 },
    { Name: "CANOGIDER", Amount: 2292897.10, Due: 0, Type: 1 },
    // ... more items
  ];
};

export interface FuturePaymentData { // Changed from array to object to match Retool data structure
  PaymentAmount: number[]; // Retool used PaymentAmount[0]
}
export const fetchSpisaFuturePayments = async (): Promise<FuturePaymentData> => {
  await mockApiDelay();
  return { PaymentAmount: [5895980.53] };
};

export interface DueBalanceData { // Changed from array to object
  Due: number[]; // Retool used Due[0]
}
export const fetchSpisaDueBalance = async (): Promise<DueBalanceData> => {
  await mockApiDelay();
  return { Due: [4662863.008] };
};

export interface SpisaBilledAmountData { // Changed from array to object
  InvoiceAmount: number; // Retool used InvoiceAmount directly (not an array)
}
export const fetchSpisaBilled = async (period: 'month' | 'day'): Promise<SpisaBilledAmountData> => {
  await mockApiDelay();
  if (period === 'month') return { InvoiceAmount: 2544409.84 };
  return { InvoiceAmount: 0 }; // Example for 'day'
};

// --- xERP Data Types & Mocks ---
export interface XerpBilledAmountData { // Changed from array to object
  BilledMonthly?: number; // For month
  BilledToday?: number;   // For day
}
export const fetchXerpBilled = async (period: 'month' | 'day'): Promise<XerpBilledAmountData> => {
  await mockApiDelay();
  if (period === 'month') return { BilledMonthly: 16018545.554 };
  return { BilledToday: 0 }; // Example for 'day'
};

export interface BillHistoryItem {
  MonthYear: string; // ISO Date string e.g., "2024-05-01T00:00:00Z"
  Amount: number;
}
export const fetchXerpBillsHistory = async (): Promise<BillHistoryItem[]> => {
  await mockApiDelay();
  return [
    { MonthYear: "2024-05-01T00:00:00Z", Amount: 60000000 },
    { MonthYear: "2024-06-01T00:00:00Z", Amount: 110000000 },
    // ... 12 months data
  ];
};

export interface BillItem {
  order_no: string;
  invoiceDate: string; // ISO Date string
  customerName: string;
  Type: number;
  invoiceNumber: string;
  IdCliente: string;
  totalAmount: number;
}
export const fetchXerpBills = async (filterPeriod: 'month' | 'day' | 'all'): Promise<BillItem[]> => {
  await mockApiDelay(1500);
  if (filterPeriod === 'all') return []; // Example
  return [
    { order_no: "123", invoiceDate: new Date().toISOString(), customerName: "Cliente Ejemplo SA", Type: 10, invoiceNumber: "FC-A001-00012345", IdCliente: "CUST001", totalAmount: 121000 },
    // ... more items
  ];
};

export interface BillLineItem {
  stk_code: string;
  description: string;
  qty_sent: number;
}
export const fetchXerpBillItems = async (orderNo: string): Promise<BillLineItem[]> => {
  await mockApiDelay();
  if (!orderNo) return [];
  return [
    { stk_code: "TR12X6", description: "Tee de Reducción STD...", qty_sent: 5 },
    // ...
  ];
};

// --- Stock Related Data Types & Mocks (SPISA) ---
export interface StockItem {
  idArticulo: number;
  Codigo: string;
  descripcion: string;
  cantidad_en_stock: number;
  cantidad_vendida_en_periodo: number;
  costo_de_oportunidad: number;
  ultima_compra: string; // ISO Date string
  estado: 'Necesita Reposicion' | 'OK' | 'Stock Optimo' | 'Bajo Stock';
  IdCategoria: number;
  CategoriaName?: string; // For display
  ProveedorName?: string;
  PaisProveedorName?: string;
}
export const fetchSpisaStock = async (filters: {
  yearsSoldIn: number;
  categoryIds?: string[]; // Assuming multiselect returns array of strings/numbers
  providerIds?: string[];
  countryNames?: string[];
  needsRestock?: boolean;
}): Promise<StockItem[]> => {
  await mockApiDelay(2000);
  // Implement mock filtering logic if possible, or return a large diverse set
  return [
    { idArticulo: 1, Codigo: "TR12X6", descripcion: "Tee de Reducción STD 1/2x3/4", cantidad_en_stock: 0, cantidad_vendida_en_periodo: 5, costo_de_oportunidad: 7687, ultima_compra: "2023-08-30T00:00:00Z", estado: "Necesita Reposicion", IdCategoria: 1, CategoriaName: "Bridas" },
    { idArticulo: 2, Codigo: "BSS15014", descripcion: "Bridas S-150 SORF de 1/4", cantidad_en_stock: 23, cantidad_vendida_en_periodo: 39, costo_de_oportunidad: 6707.04, ultima_compra: "2025-03-25T00:00:00Z", estado: "Necesita Reposicion", IdCategoria: 1 },
    // ... many more items
  ];
};

export interface StockValueByCategoryItem {
  category: string;
  stock_value: number;
}
export const fetchSpisaStockValueByCategory = async (yearsSoldIn: number): Promise<StockValueByCategoryItem[]> => {
  await mockApiDelay();
  return [
    { category: "Bridas", stock_value: 12500000 }, // 46.6%
    { category: "Accesorios", stock_value: 7300000 }, // 27.2%
    { category: "Accesorio Forjado", stock_value: 3500000 }, // 13.3%
    { category: "Casquetes Grandes", stock_value: 2350000 }, // 8.77%
    { category: "Otros", stock_value: 900000 }, // 3.33%
  ];
};

export interface StockSnapshotItem {
  Date: string; // ISO Date string
  StockValue: number;
}
export const fetchSpisaStockSnapshots = async (): Promise<StockSnapshotItem[]> => {
  await mockApiDelay();
  // Generate data points to mimic the chart in image_2b9dee.png
  return [
    { Date: "2023-01-01T00:00:00Z", StockValue: 9000000 },
    { Date: "2023-03-01T00:00:00Z", StockValue: 10500000 },
    // ... more items
  ];
};

export interface DiscontinuedStockItem {
  descripcion: string;
  cantidad: number;
  categoria: string;
  // Add other fields from Retool's tblDiscontinued if needed
}
export const fetchSpisaStockDiscontinued = async (yearsNotSold: number): Promise<DiscontinuedStockItem[]> => {
  await mockApiDelay();
  return [
    { descripcion: "Item Discontinuado A", cantidad: 10, categoria: "Bridas" },
    // ...
  ];
};

export interface DiscontinuedStockValueItem {
  category: string;
  stock_value: number;
}
export const fetchSpisaStockDiscontinuedGrouped = async (yearsNotSold: number): Promise<DiscontinuedStockValueItem[]> => {
  await mockApiDelay();
  return [
    { category: "Bridas", stock_value: 500000 },
    // ...
  ];
};

// --- Derived Data Logic (to be implemented in Zustand store or component logic) ---
// For Bill Items with Remaining Stock:
// 1. Call fetchXerpBillItems(orderNo)
// 2. For each item, find its stock level from a potentially cached full stock list (fetchSpisaStock with general/no filters)
//    or make individual calls if necessary (less efficient).
//    const stockData = await fetchSpisaStock({ yearsSoldIn: 5 /* some default */});
//    const billItemWithStock = xerpItem.map(item => {
//      const stockInfo = stockData.find(s => s.Codigo === item.stk_code);
//      return { ...item, remaining_count: stockInfo ? stockInfo.cantidad_en_stock : null };
//    });

IV. Zustand Store (store.ts):

State:

Loading flags for each distinct API call (e.g., isBalancesLoading, isStockLoading).

Error states for API calls.

Data fetched from APIs (e.g., balances: BalanceItem[], currentStock: StockItem[]).

billFilterPeriod: 'month' | 'day' | 'all' (default to 'month').

selectedOrderNo: string | null.

Filter states for "Actual" stock screen:

stockYearsSoldIn: number (default 2).

stockNeedsRestock: boolean (default false).

stockSelectedCategoryIds: string[] (default []).

stockSelectedProviderIds: string[] (default []).

stockSelectedCountryNames: string[] (default []).

Filter state for "Discontinuado" stock screen:

stockDiscontinuedYearsNotSold: number (default 10).

Actions:

Async actions to call each mock API function, update loading states, data states, and error states.

Actions to update filter states and billFilterPeriod, selectedOrderNo.

Action to derive billItemsWithRemainingStock.

V. Screen Specifications:

A. Dashboard Screen (Hosts MainTabs - DashboardScreen.tsx):

Layout: Render 5 KPI cards in a responsive grid (e.g., 2 columns on smaller screens, adapting). The KPI cards should be above the MainTabs navigator.

KPI Card Component (components/KpiCard.tsx):

Props: title: string, primaryValue: string, primaryValueColor: string, secondaryValue?: string, secondaryValueColor?: string, iconName: string, iconLibrary: 'FontAwesome' | 'FontAwesome5' | 'MaterialIcons', iconColor: string, onPress?: () => void.

Styling: Card-like appearance with padding, rounded corners, shadow. Icon on left, values and title on right. Primary value larger and bolder.

KPI Data & Logic:

"Total de deuda al [current date]":

Data: spisaBalances from store. Sum Amount where Type === 0 for primary (red), sum Amount where Type === 1 for secondary (black/gray).

Icon: FontAwesome name dollar-sign, color red.

"Valores por Cobrar":

Data: spisaFuturePayments.PaymentAmount[0].

Icon: FontAwesome5 name sack-dollar, color blue.

OnPress: Refresh spisaFuturePayments data.

"Total Deuda Vencida":

Data: spisaDueBalance.Due[0].

Icon: FontAwesome5 name file-invoice-dollar, color red.

"Facturado en [Current Month]":

Primary (Red): xerpBilledMonth.BilledMonthly.

Secondary (Black/Gray): spisaBilledMonth.InvoiceAmount.

Icon: FontAwesome name chart-line, color red.

OnPress: store.setBillFilterPeriod('month'), navigate to "Facturas" tab.

"Facturado Hoy":

Primary (Red): xerpBilledDay.BilledToday.

Secondary (Black/Gray): spisaBilledDay.InvoiceAmount.

Icon: FontAwesome name calendar-day, color red.

OnPress: store.setBillFilterPeriod('day'), navigate to "Facturas" tab.

Use useEffect to fetch initial KPI data on mount.

Display ActivityIndicator while individual KPIs are loading.

Format currency values using a utility: formatCurrency(value, 'ARS').

Format date for "Total de deuda" label: dd/MM/yyyy.

B. "Cuentas Corriente" Screen (screens/AccountsReceivableScreen.tsx):

Layout: Full-screen table.

Table Component (components/ResponsiveTable.tsx or FlatList):

Data: spisaBalances from store.

Columns: "Name" (flex: 2), "Saldo" (flex: 1, numeric, right-align), "Saldo Vencido" (flex: 1, numeric, right-align).

Row Styling: If item.Type === 0, set background color for the row or "Name" cell to a dark gray (e.g., #4A4A4A) and text color to white.

Interactivity: On row press, sort spisaBalances in the local component state by "Saldo Vencido" (descending).

Footer: Text "X results". Row with 3 icons: FontAwesome name filter (no action), download (no action), refresh (action: re-fetch spisaBalances).

Display ActivityIndicator while isBalancesLoading.

C. "Facturas" Screen (screens/InvoicesScreen.tsx):

Layout: Vertical stack: Line Chart, Invoices Table, Invoice Items Table.

Line Chart (Historical Billing):

Data: xerpBillsHistory from store. Map MonthYear to X-axis (formatted "MMM YYYY"), Amount to Y-axis.

Title: "Monto Facturado Histórico" (or similar).

Styling: Match image_2b9de8.png (blue line, markers).

Invoices Table (tblBills):

Data: Filtered xerpBills from store based on store.billFilterPeriod.

Columns: "Invoice date" (DD/MM/YYYY), "Customer name", "Invoice number", "Total amount" (ARS currency, right-align).

OnPress: store.setSelectedOrderNo(item.order_no). Highlight selected row.

Footer: Icons for filter, download, refresh (re-fetch xerpBills).

Invoice Items Table (table2):

Data: Derived billItemsWithRemainingStock (fetch xerpBillItems for selectedOrderNo, then merge with spisaStock data to find remaining_count).

Visible if selectedOrderNo is not null.

Columns: "Description", "Qty sent" (right-align), "Remaining count" (right-align).

Footer: Icons for filter, download, refresh (re-fetch items for selectedOrderNo).

Display ActivityIndicator for each section during its data loading.

D. "Stock" Screen (screens/StockScreen.tsx):

Renders the StockTabs navigator.

D1. "Actual" Sub-View (screens/stock/CurrentStockScreen.tsx):

Layout: (Refer to image_2b9dee.png)

Top row: "Vendido en años:" label, NumberInput component.

Main content area (can be a ScrollView):

Row 1 (or flex row): Pie Chart (flex: 1), Line Chart (flex: 1.5).

Row 2 (or alongside charts if space permits, or below): Filter Section.

Row 3: Stock Table.

Filter Components (components/filters/):

NumberInput for "Vendido en años": Updates store.stockYearsSoldIn.

Checkbox for "Necesita Reposicion": Updates store.stockNeedsRestock.

MultiSelectList (custom or library) for "Buscar por Categoria", "Proveedor", "Pais":

Options fetched or hardcoded (mock for now).

Updates store.stockSelectedCategoryIds, etc.

Pie Chart (Stock Value by Category):

Data: spisaStockValueByCategory (fetched using store.stockYearsSoldIn).

Display percentages and category labels.

Line Chart (Stock Value Over Time):

Data: spisaStockSnapshots. X-axis: Date (YYYY), Y-axis: StockValue.

Stock Table (tblStock):

Data: spisaStock from store (fetched using all current filter states).

Columns: "Codigo", "Descripcion", "Cantidad en st...", "Cantidad vendida en peri...", "Costo de oportunit..." (ARS currency), "Ultima com..." (DD/MM/YYYY), "Estado" (display as colored Tag/Pill component: "Necesita Reposicion" - yellow, "OK" - green, "Bajo Stock" - orange, etc.).

Footer: Icons for filter, download, refresh.

All filter changes trigger re-fetch of spisaStock and spisaStockValueByCategory.

D2. "Discontinuado" Sub-View (screens/stock/DiscontinuedStockScreen.tsx):

Layout:

Top row: "No vendido en años:" label, NumberInput component.

Main content area: Pie Chart, then Table below.

Input: NumberInput for "No vendido en años": Updates store.stockDiscontinuedYearsNotSold. Triggers re-fetches.

Pie Chart (Discontinued Stock Value by Category):

Data: spisaStockDiscontinuedGrouped (fetched using store.stockDiscontinuedYearsNotSold).

Discontinued Stock Table (tblDiscontinued):

Data: spisaStockDiscontinued (fetched using store.stockDiscontinuedYearsNotSold).

Columns: "Descripcion", "Cantidad" (right-align), "Categoria".

Footer: Icons for filter, download, refresh.

VI. Reusable Components (components/ directory):

KpiCard.tsx (as defined above)

ResponsiveTable.tsx (or helpers for FlatList table rendering)

ChartWrapper.tsx (if common styling/loading states for charts)

StyledNumberInput.tsx

StyledCheckbox.tsx

StyledMultiSelectList.tsx

TagPill.tsx (for "Estado" in stock table)

LoadingIndicator.tsx

ErrorMessage.tsx

ScreenWrapper.tsx (for consistent padding/background)

VII. Utilities (utils/ directory):

formatting.ts:

formatCurrency(value: number, currencyCode: 'ARS' | 'USD' = 'ARS'): string

formatDate(date: string | Date, formatString: string = 'dd/MM/yyyy'): string

formatChartDate(date: string | Date, formatString: string = 'MMM yy'): string

colors.ts (Theme colors)

typography.ts (Font sizes, families)

VIII. AsyncStorage Usage:

Key: appSettings_billFilterPeriod, Value: 'month' | 'day' | 'all'. Load on app start, save on change.

Consider persisting other filter states if desired for user convenience.

IX. General Development Notes:

Styling: Aim for a clean, modern, and professional look as per the screenshots. Use consistent padding, margins, and font sizes.

Error Handling: For each API call in the store, catch errors and set an appropriate error message in the state. Display these errors gracefully in the UI (e.g., a small toast or an error message component).

Loading States: Each screen/component that fetches data should display a relevant loading indicator (e.g., ActivityIndicator overlaying the component or a skeleton loader).

Empty States: Tables and charts should display a user-friendly message when there's no data to show (e.g., "No invoices found for this period", "No stock items match your filters").

Code Comments: Add JSDoc/TSDoc comments for all components, props, store actions, and complex utility functions.

Directory Structure: Organize files logically (e.g., screens/, components/, services/, store/, navigation/, utils/, assets/).

This comprehensive specification should provide a solid foundation for your AI-assisted coding. Remember to break it down, review the generated code carefully, and iterate. Good luck!